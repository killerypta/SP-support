import asyncio
from aiogram import Router, types
from aiogram.filters import Command
from database import eat_cookie, get_top_cookie

router = Router()

@router.message(Command("cookie"))
async def cookie(message: types.Message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name.replace("<", "&lt;").replace(">", "&gt;")  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML
    user_link = f'<a href="tg://user?id={user_id}">{first_name}</a>'  # –ì–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
    weight, remaining_minutes, remaining_seconds = eat_cookie(user_id, first_name)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    if weight is None:
        # –ï—Å–ª–∏ –∫—É–ª–¥–∞—É–Ω –Ω–µ –ø—Ä–æ—à–µ–ª, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–ª–æ—Å—å
        result_message = await message.answer(f"{user_link}, –ø–æ–≤—Ç–æ—Ä–∏ —á–µ—Ä–µ–∑ <b>{remaining_minutes} –º–∏–Ω—É—Ç</b> –∏ <b>{remaining_seconds} —Å–µ–∫—É–Ω–¥</b>.", parse_mode="HTML")
    else:
        # –ï—Å–ª–∏ –∫—É–ª–¥–∞—É–Ω –ø—Ä–æ—à–µ–ª, –ø–µ—á–µ–Ω—å–∫–∞ —Å—ä–µ–¥–µ–Ω–∞
        result_message = await message.answer(f"{user_link}, —Ç—ã —Å—ä–µ–ª(–∞) <b>{weight} –∫–≥</b> –ø–µ—á–µ–Ω—å—è üç™ –°—ä–µ–¥–µ–Ω–æ —É–∂–µ <b>{weight} –∫–≥</b>.", parse_mode="HTML")
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥
    await asyncio.sleep(15)
    await message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await result_message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
                    
@router.message(Command("cookietop"))
async def cookie_top(message: types.Message):
    top_users = get_top_cookie()
    if not top_users:
        await message.answer("–¢–æ–ø –ø–æ–∫–∞ –ø—É—Å—Ç! –ù–∞—á–Ω–∏ —Å–æ–±–∏—Ä–∞—Ç—å –ø–µ—á–µ–Ω—å–∫–∏ /cookie! üç™")
        return
    
    top_text = "üç™ <b>–¢–æ–ø 10</b> –∏–≥—Ä–æ–∫–æ–≤ <b>Cookie!</b> –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è:\n"
    for i, (user_id, first_name, total_weight) in enumerate(top_users):
        first_name = first_name.replace("<", "&lt;").replace(">", "&gt;")  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML
        user_link = f'<a href="tg://user?id={user_id}">{first_name}</a>'  # –ì–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
        top_text += f"{i+1}. {user_link} ‚Äî <b>{total_weight} –∫–≥</b>\n"

    await message.answer(top_text, parse_mode="HTML")
